service: DigitalSystemsBackend
plugins:
  - serverless-plugin-typescript
  - serverless-offline
provider:
  name: aws
  stage: ${env:TRAVIS_BRANCH, "dev"}
  runtime: nodejs8.10
  region: us-east-1
  versionFunctions: false
  role: myDefaultRole
  memorySize: 128
  timeout: 30
  logRetentionInDays: 1
  environment:
    STAGE: ${self:custom.stage}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  tables:
    readCapacity: 1
    writeCapacity: 1
    lightTableName: ${self:service}-${self:custom.stage}-lightLevel
    pressureTableName: ${self:service}-${self:custom.stage}-pressure
    temperatureTableName: ${self:service}-${self:custom.stage}-temperature
    humidityTableName: ${self:service}-${self:custom.stage}-humidity
    rainTableName: ${self:service}-${self:custom.stage}-rain
  serverless-offline:
    host: "::"
    useSeparateProcesses: false
    #httpsProtocol: "dev-certs"
    port: 8080
 
package:
  individually: false
  exclude:
    - package.json
    - package-lock.json
  include:
    - src/**

functions:
  exampleFunction:
    handler: src/Example.Example
    events:
      - http:
          path: /example
          method: get
          cors: true
resources:
  Resources:
    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambdaFullAccess
    LightTable:
         Type: AWS::DynamoDB::Table
         Properties:
           TableName: ${self:custom.tables.lightTableName}
           AttributeDefinitions:
           - AttributeName: ID
             AttributeType: S
           KeySchema:
           - AttributeName: ID
             KeyType: HASH
           ProvisionedThroughput:
             ReadCapacityUnits: ${self:custom.tables.readCapacity}
             WriteCapacityUnits: ${self:custom.tables.writeCapacity}
    PressureTable:
         Type: AWS::DynamoDB::Table
         Properties:
           TableName: ${self:custom.tables.pressureTableName}
           AttributeDefinitions:
           - AttributeName: ID
             AttributeType: S
           KeySchema:
           - AttributeName: ID
             KeyType: HASH
           ProvisionedThroughput:
             ReadCapacityUnits: ${self:custom.tables.readCapacity}
             WriteCapacityUnits: ${self:custom.tables.writeCapacity}
    TemperatureTable:
         Type: AWS::DynamoDB::Table
         Properties:
           TableName: ${self:custom.tables.temperatureTableName}
           AttributeDefinitions:
           - AttributeName: ID
             AttributeType: S
           KeySchema:
           - AttributeName: ID
             KeyType: HASH
           ProvisionedThroughput:
             ReadCapacityUnits: ${self:custom.tables.readCapacity}
             WriteCapacityUnits: ${self:custom.tables.writeCapacity}
    HumidityTable:
         Type: AWS::DynamoDB::Table
         Properties:
           TableName: ${self:custom.tables.humidityTableName}
           AttributeDefinitions:
           - AttributeName: ID
             AttributeType: S
           KeySchema:
           - AttributeName: ID
             KeyType: HASH
           ProvisionedThroughput:
             ReadCapacityUnits: ${self:custom.tables.readCapacity}
             WriteCapacityUnits: ${self:custom.tables.writeCapacity}
    RainTable:
         Type: AWS::DynamoDB::Table
         Properties:
           TableName: ${self:custom.tables.rainTableName}
           AttributeDefinitions:
           - AttributeName: ID
             AttributeType: S
           KeySchema:
           - AttributeName: ID
             KeyType: HASH
           ProvisionedThroughput:
             ReadCapacityUnits: ${self:custom.tables.readCapacity}
             WriteCapacityUnits: ${self:custom.tables.writeCapacity}